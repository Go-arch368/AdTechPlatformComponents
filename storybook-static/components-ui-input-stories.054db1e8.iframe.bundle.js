"use strict";(self.webpackChunkmy_app=self.webpackChunkmy_app||[]).push([[33],{"./components/ui/input.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllTypes:()=>AllTypes,Basic:()=>Basic,WithStates:()=>WithStates,__namedExportsOrder:()=>__namedExportsOrder,default:()=>input_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),utils=(__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),__webpack_require__("./lib/utils.ts"));function Input({className,type,...props}){return(0,jsx_runtime.jsx)("input",{type,"data-slot":"input",className:(0,utils.cn)("file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm","focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]","aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",className),...props})}Input.__docgenInfo={description:"",methods:[],displayName:"Input"};var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs");const input_stories={title:"Components/Atoms/Input",component:Input,tags:["autodocs"],argTypes:{type:{options:["text","email","password","number"],control:{type:"select"}},disabled:{control:"boolean"},placeholder:{control:"text"},className:{control:"text"}},args:{type:"text",disabled:!1,placeholder:"Enter your text..."},parameters:{layout:"centered"}},Basic={args:{placeholder:"Enter your text...",className:"w-full max-w-sm"},play:async({canvasElement})=>{const input=(0,dist.ux)(canvasElement).getByPlaceholderText("Enter your text...");await dist.Q4.click(input),await(0,dist.E3)(input).toBeVisible(),await dist.Q4.type(input,"Hello World!"),await(0,dist.E3)(input).toHaveValue("Hello World!")}},AllTypes={render:()=>(0,jsx_runtime.jsxs)("div",{className:"grid gap-4 sm:grid-cols-2 lg:grid-cols-4 w-full max-w-2xl mx-auto",children:[(0,jsx_runtime.jsx)(Input,{type:"text",placeholder:"Text input",className:"w-full max-w-xs"}),(0,jsx_runtime.jsx)(Input,{type:"email",placeholder:"Email input",className:"w-full max-w-xs"}),(0,jsx_runtime.jsx)(Input,{type:"password",placeholder:"Password input",className:"w-full max-w-xs"}),(0,jsx_runtime.jsx)(Input,{type:"number",placeholder:"Number input",className:"w-full max-w-xs"})]}),play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),textInput=canvas.getByPlaceholderText("Text input"),emailInput=canvas.getByPlaceholderText("Email input"),passwordInput=canvas.getByPlaceholderText("Password input"),numberInput=canvas.getByPlaceholderText("Number input");await dist.Q4.type(textInput,"Some text"),await(0,dist.E3)(textInput).toHaveValue("Some text"),await dist.Q4.type(emailInput,"test@example.com"),await(0,dist.E3)(emailInput).toHaveValue("test@example.com"),await dist.Q4.type(passwordInput,"password123"),await(0,dist.E3)(passwordInput).toHaveValue("password123"),await dist.Q4.type(numberInput,"12345"),await(0,dist.E3)(numberInput).toHaveValue(12345)}},WithStates={render:()=>(0,jsx_runtime.jsxs)("div",{className:"space-y-4 w-full max-w-sm mx-auto",children:[(0,jsx_runtime.jsx)(Input,{placeholder:"Normal state",className:"w-full"}),(0,jsx_runtime.jsx)(Input,{placeholder:"Disabled input",disabled:!0,className:"w-full"}),(0,jsx_runtime.jsx)(Input,{placeholder:"Error state",className:"w-full border-destructive","aria-invalid":"true"})]}),play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),normalInput=canvas.getByPlaceholderText("Normal state"),disabledInput=canvas.getByPlaceholderText("Disabled input"),errorInput=canvas.getByPlaceholderText("Error state");await dist.Q4.click(normalInput),await(0,dist.E3)(normalInput).toHaveFocus(),await dist.Q4.type(normalInput,"Test"),await(0,dist.E3)(normalInput).toHaveValue("Test"),await(0,dist.E3)(disabledInput).toBeDisabled(),await(0,dist.E3)(errorInput).toHaveAttribute("aria-invalid","true")}},__namedExportsOrder=["Basic","AllTypes","WithStates"];Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:'{\n  args: {\n    placeholder: "Enter your text...",\n    className: "w-full max-w-sm"\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText("Enter your text...");\n    await userEvent.click(input);\n    await expect(input).toBeVisible();\n    await userEvent.type(input, "Hello World!");\n    await expect(input).toHaveValue("Hello World!");\n  }\n}',...Basic.parameters?.docs?.source}}},AllTypes.parameters={...AllTypes.parameters,docs:{...AllTypes.parameters?.docs,source:{originalSource:'{\n  render: () => <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4 w-full max-w-2xl mx-auto">\r\n      <Input type="text" placeholder="Text input" className="w-full max-w-xs" />\r\n      <Input type="email" placeholder="Email input" className="w-full max-w-xs" />\r\n      <Input type="password" placeholder="Password input" className="w-full max-w-xs" />\r\n      <Input type="number" placeholder="Number input" className="w-full max-w-xs" />\r\n    </div>,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByPlaceholderText("Text input");\n    const emailInput = canvas.getByPlaceholderText("Email input");\n    const passwordInput = canvas.getByPlaceholderText("Password input");\n    const numberInput = canvas.getByPlaceholderText("Number input");\n    await userEvent.type(textInput, "Some text");\n    await expect(textInput).toHaveValue("Some text");\n    await userEvent.type(emailInput, "test@example.com");\n    await expect(emailInput).toHaveValue("test@example.com");\n    await userEvent.type(passwordInput, "password123");\n    await expect(passwordInput).toHaveValue("password123");\n    await userEvent.type(numberInput, "12345");\n    await expect(numberInput).toHaveValue(12345); // number input returns number value\n  }\n}',...AllTypes.parameters?.docs?.source}}},WithStates.parameters={...WithStates.parameters,docs:{...WithStates.parameters?.docs,source:{originalSource:'{\n  render: () => <div className="space-y-4 w-full max-w-sm mx-auto">\r\n      <Input placeholder="Normal state" className="w-full" />\r\n      <Input placeholder="Disabled input" disabled className="w-full" />\r\n      <Input placeholder="Error state" className="w-full border-destructive" aria-invalid="true" />\r\n    </div>,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const normalInput = canvas.getByPlaceholderText("Normal state");\n    const disabledInput = canvas.getByPlaceholderText("Disabled input");\n    const errorInput = canvas.getByPlaceholderText("Error state");\n    await userEvent.click(normalInput);\n    await expect(normalInput).toHaveFocus();\n    await userEvent.type(normalInput, "Test");\n    await expect(normalInput).toHaveValue("Test");\n    await expect(disabledInput).toBeDisabled();\n    await expect(errorInput).toHaveAttribute("aria-invalid", "true");\n  }\n}',...WithStates.parameters?.docs?.source}}}},"./lib/utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{cn:()=>cn});var clsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),tailwind_merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tailwind-merge/dist/bundle-mjs.mjs");function cn(...inputs){return(0,tailwind_merge__WEBPACK_IMPORTED_MODULE_0__.QP)((0,clsx__WEBPACK_IMPORTED_MODULE_1__.$)(inputs))}}}]);